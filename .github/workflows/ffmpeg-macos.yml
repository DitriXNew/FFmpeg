name: build-ffmpeg-macos-arm64-lgpl-av1-encoders-opus-vorbis-flac-alac

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  FFMPEG_TAG: "n8.0"
  INSTALL_PREFIX: "${{ github.workspace }}/install"
  DEPS_PREFIX: "${{ github.workspace }}/deps-install"
  MACOSX_DEPLOYMENT_TARGET: "13.0"

jobs:
  build-arm64:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Install build deps (idempotent)
        run: |
          set -euxo pipefail
          export HOMEBREW_NO_AUTO_UPDATE=1
          ensure () { if brew list --versions "$1" >/dev/null 2>&1; then echo "✓ $1 already installed"; else brew install "$1"; fi }
          ensure cmake
          ensure ninja
          ensure pkg-config
          ensure nasm
          ensure yasm
          ensure autoconf
          ensure automake
          ensure libtool
          # meson/python не нужны — dav1d не собираем

      # -------- libaom (AV1 encoder; static) --------
      - name: Build & install libaom (static)
        run: |
          set -euxo pipefail
          git clone --depth=1 https://aomedia.googlesource.com/aom
          cmake -S aom -B build-aom \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" \
                -DBUILD_SHARED_LIBS=OFF \
                -DENABLE_DOCS=OFF -DENABLE_TESTS=OFF -DENABLE_EXAMPLES=OFF \
                -DENABLE_NASM=ON -DAOM_TARGET_CPU=arm64
          cmake --build build-aom --parallel
          cmake --install build-aom
          
          # Debug info
          echo "=== libaom installation verification ==="
          ls -la "$DEPS_PREFIX/lib" | sed -n '1,200p'
          ls -la "$DEPS_PREFIX/lib/pkgconfig/" | grep aom || echo "No aom.pc found"
          export PKG_CONFIG_PATH="$DEPS_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          pkg-config --exists aom && echo "✅ libaom pkg-config OK" || echo "❌ libaom pkg-config failed"

      # -------- SVT-AV1 (AV1 encoder; static) --------
      - name: Build & install SVT-AV1 (static)
        run: |
          set -euxo pipefail
          git clone --depth=1 https://gitlab.com/AOMediaCodec/SVT-AV1.git
          cmake -S SVT-AV1 -B build-svt \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="$DEPS_PREFIX" \
                -DBUILD_SHARED_LIBS=OFF \
                -DBUILD_APPS=OFF -DBUILD_TESTING=OFF
          cmake --build build-svt --parallel
          cmake --install build-svt
          
          # Debug info - SVT-AV1 pkg-config может иметь разные имена
          echo "=== SVT-AV1 installation verification ==="
          ls -la "$DEPS_PREFIX/lib" | sed -n '1,200p'
          ls -la "$DEPS_PREFIX/lib/pkgconfig/" | grep -i svt || echo "No SVT pkg-config found"
          export PKG_CONFIG_PATH="$DEPS_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          
          # Try different possible names for SVT-AV1 pkg-config
          if pkg-config --exists SvtAv1Enc; then
            echo "✅ SVT-AV1 found as SvtAv1Enc"
            pkg-config --modversion SvtAv1Enc
          elif pkg-config --exists svt-av1; then  
            echo "✅ SVT-AV1 found as svt-av1"
            pkg-config --modversion svt-av1
          elif pkg-config --exists libsvtav1; then
            echo "✅ SVT-AV1 found as libsvtav1" 
            pkg-config --modversion libsvtav1
          else
            echo "❌ SVT-AV1 pkg-config not found under any known name"
            echo "Available pkg-config files:"
            ls -la "$DEPS_PREFIX/lib/pkgconfig/"
          fi

      # -------- libopus (audio encoder; static) --------
      - name: Build & install libopus (static)
        run: |
          set -euxo pipefail
          mkdir -p "$DEPS_PREFIX"
          curl -L -o opus.tar.gz https://downloads.xiph.org/releases/opus/opus-1.5.2.tar.gz
          tar -xzf opus.tar.gz
          cd opus-1.5.2
          ./configure --prefix="$DEPS_PREFIX" --disable-shared --enable-static CFLAGS="-O3"
          make -j"$(sysctl -n hw.ncpu)"
          make install
          
          # Verify installation  
          export PKG_CONFIG_PATH="$DEPS_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          pkg-config --exists opus && echo "✅ libopus pkg-config OK"
          pkg-config --modversion opus

      # -------- libogg (container helper for Vorbis; static) --------
      - name: Build & install libogg (static)
        run: |
          set -euxo pipefail
          cd "${{ github.workspace }}"
          curl -L -o libogg.tar.gz https://downloads.xiph.org/releases/ogg/libogg-1.3.5.tar.gz
          tar -xzf libogg.tar.gz
          cd libogg-1.3.5
          ./configure --prefix="$DEPS_PREFIX" --disable-shared --enable-static CFLAGS="-O3"
          make -j"$(sysctl -n hw.ncpu)"
          make install
          
          # Verify installation
          export PKG_CONFIG_PATH="$DEPS_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          pkg-config --exists ogg && echo "✅ libogg pkg-config OK"
          pkg-config --modversion ogg

      # -------- libvorbis (audio encoder; static) - FIXED VERSION --------
      - name: Build & install libvorbis (static) - with macOS compatibility fix
        run: |
          set -euxo pipefail
          cd "${{ github.workspace }}"
          # Use newer version that has macOS compatibility fixes
          curl -L -o libvorbis.tar.gz https://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.gz
          tar -xzf libvorbis.tar.gz
          cd libvorbis-1.3.7
          
          # Apply fix for the -force_cpusubtype_ALL linker issue
          # This patches the configure script to remove the problematic flag
          if [[ -f configure ]]; then
            sed -i.bak 's/-force_cpusubtype_ALL//g' configure
          fi
          
          # Also fix it in configure.ac if it exists and regenerate
          if [[ -f configure.ac ]] || [[ -f configure.in ]]; then
            if [[ -f configure.ac ]]; then
              sed -i.bak 's/-force_cpusubtype_ALL//g' configure.ac
            fi
            if [[ -f configure.in ]]; then
              sed -i.bak 's/-force_cpusubtype_ALL//g' configure.in
            fi
            # Regenerate configure script
            autoreconf -fiv
          fi
          
          # Set PKG_CONFIG_PATH for this build
          export PKG_CONFIG_PATH="$DEPS_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          
          # Configure with additional macOS-specific flags
          ./configure \
            --prefix="$DEPS_PREFIX" \
            --disable-shared --enable-static \
            --disable-oggtest \
            --with-ogg="$DEPS_PREFIX" \
            CFLAGS="-O3 -fPIC" \
            LDFLAGS="-L$DEPS_PREFIX/lib" \
            CPPFLAGS="-I$DEPS_PREFIX/include"
          
          make -j"$(sysctl -n hw.ncpu)"
          make install
          
          # Verify installation with comprehensive checks
          echo "=== PKG_CONFIG_PATH after libvorbis install ==="
          echo $PKG_CONFIG_PATH
          echo "=== Installed pkg-config files ==="
          ls -la "$DEPS_PREFIX/lib/pkgconfig/"
          
          echo "=== Verifying libvorbis pkg-config functionality ==="
          pkg-config --exists vorbis && echo "✅ libvorbis pkg-config OK" || echo "❌ libvorbis pkg-config failed"
          pkg-config --exists vorbisenc && echo "✅ libvorbisenc pkg-config OK" || echo "❌ libvorbisenc pkg-config failed"
          
          # Show versions and detailed output
          pkg-config --modversion vorbis || echo "Failed to get vorbis version"
          pkg-config --modversion vorbisenc || echo "Failed to get vorbisenc version"
          
          echo "=== Static library verification ==="
          ls -la "$DEPS_PREFIX/lib/libvorbis"* || echo "No libvorbis libraries found"

      # -------- FFmpeg (static, LGPL, AV1 encoders + Opus/Vorbis/FLAC/ALAC, anti-X11) --------
      - name: Build FFmpeg (LGPL, static, AV1 + clean audio codecs)
        run: |
          set -euxo pipefail
          git clone https://github.com/FFmpeg/FFmpeg ffmpeg-src
          cd ffmpeg-src
          git checkout "$FFMPEG_TAG"

          export MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET
          export LDFLAGS="-L$DEPS_PREFIX/lib"
          export CFLAGS="-I$DEPS_PREFIX/include"
          export CPPFLAGS="$CFLAGS"
          export PKG_CONFIG_PATH="$DEPS_PREFIX/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          
          # Important: FFmpeg might need this specific PKG_CONFIG setting
          export PKG_CONFIG="pkg-config --static"
          
          # Debug: verify all dependencies are found
          echo "=== Dependency verification ==="
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo "LDFLAGS: $LDFLAGS"
          echo "CFLAGS: $CFLAGS"
          
          echo "=== Available pkg-config files ==="
          ls -la "$DEPS_PREFIX/lib/pkgconfig/"
          
          echo "=== Testing pkg-config dependencies ==="
          pkg-config --exists aom && echo "✅ libaom found" || echo "❌ libaom not found"
          
          # Test SVT-AV1 with different possible names
          if pkg-config --exists SvtAv1Enc; then
            echo "✅ SVT-AV1 found as SvtAv1Enc"
          elif pkg-config --exists svt-av1; then  
            echo "✅ SVT-AV1 found as svt-av1"
          elif pkg-config --exists libsvtav1; then
            echo "✅ SVT-AV1 found as libsvtav1"
          else
            echo "❌ SVT-AV1 not found under any name"
          fi
          
          pkg-config --exists opus && echo "✅ libopus found" || echo "❌ libopus not found"
          pkg-config --exists ogg && echo "✅ libogg found" || echo "❌ libogg not found"
          pkg-config --exists vorbis && echo "✅ libvorbis found" || echo "❌ libvorbis not found"
          pkg-config --exists vorbisenc && echo "✅ libvorbisenc found" || echo "❌ libvorbisenc not found"
          
          echo "=== Detailed vorbis pkg-config debugging ==="
          echo "vorbis.pc content:"
          cat "$DEPS_PREFIX/lib/pkgconfig/vorbis.pc"
          echo -e "\nvorbisenc.pc content:"
          cat "$DEPS_PREFIX/lib/pkgconfig/vorbisenc.pc"
          
          echo -e "\n=== Testing pkg-config flags that FFmpeg might use ==="
          echo "pkg-config --modversion vorbis:" $(pkg-config --modversion vorbis 2>&1)
          echo "pkg-config --cflags vorbis:" $(pkg-config --cflags vorbis 2>&1) 
          echo "pkg-config --libs vorbis:" $(pkg-config --libs vorbis 2>&1)
          echo "pkg-config --static --libs vorbis:" $(pkg-config --static --libs vorbis 2>&1)
          echo "pkg-config --modversion vorbisenc:" $(pkg-config --modversion vorbisenc 2>&1)
          echo "pkg-config --cflags vorbisenc:" $(pkg-config --cflags vorbisenc 2>&1)
          echo "pkg-config --libs vorbisenc:" $(pkg-config --libs vorbisenc 2>&1)
          echo "pkg-config --static --libs vorbisenc:" $(pkg-config --static --libs vorbisenc 2>&1)

          ./configure \
            --prefix="$INSTALL_PREFIX" \
            --arch=arm64 \
            --target-os=darwin \
            --disable-gpl --disable-nonfree --disable-version3 \
            --enable-static --disable-shared \
            --enable-pic \
            --disable-debug --disable-doc \
            --enable-videotoolbox \
            \
            --disable-decoders \
            --disable-encoders \
            \
            --enable-libaom \
            --enable-libsvtav1 \
            --enable-encoder=libaom_av1 \
            --enable-encoder=libsvtav1 \
            \
            --enable-libopus \
            --enable-libvorbis \
            --enable-encoder=libopus \
            --enable-encoder=libvorbis \
            --enable-encoder=flac \
            --enable-encoder=alac \
            --enable-encoder=pcm_s16le \
            --enable-encoder=pcm_s24le \
            --enable-encoder=pcm_f32le \
            \
            --enable-decoder=opus \
            --enable-decoder=vorbis \
            --enable-decoder=flac \
            --enable-decoder=alac \
            --enable-decoder=pcm_s16le \
            --enable-decoder=pcm_s24le \
            --enable-decoder=pcm_f32le \
            \
            --disable-sdl2 \
            --disable-xlib \
            --disable-libxcb \
            --disable-libxcb-shm \
            --disable-libxcb-xfixes \
            --disable-libxcb-shape \
            --disable-indev=xcbgrab \
            --disable-vulkan \
            --disable-opencl \
          || {
            echo "❌ FFmpeg configure failed!"
            echo "=== Showing last 100 lines of config.log for debugging ==="
            tail -n 100 ffbuild/config.log
            echo "=== End of config.log ==="
            exit 1
          }

          make -j"$(sysctl -n hw.ncpu)"
          make install

      - name: Verify build (encoders/decoders present, no Homebrew dylibs, LGPL)
        run: |
          set -euxo pipefail
          "$INSTALL_PREFIX/bin/ffmpeg" -version
          echo "=== encoders (expect AV1 + Opus/Vorbis/FLAC/ALAC/PCM) ==="
          "$INSTALL_PREFIX/bin/ffmpeg" -encoders | grep -E "libaom_av1|svtav1|libopus|libvorbis| flac | alac |pcm_s16le|pcm_s24le|pcm_f32le"
          echo "=== decoders (only clean) ==="
          "$INSTALL_PREFIX/bin/ffmpeg" -decoders | grep -E " opus | vorbis | flac | alac | pcm_s16le | pcm_s24le | pcm_f32le "
          echo "=== check no GPL / version3 ==="
          ! "$INSTALL_PREFIX/bin/ffmpeg" -buildconf | grep -q -- "--enable-gpl"
          ! "$INSTALL_PREFIX/bin/ffmpeg" -buildconf | grep -q -- "--enable-version3"
          echo "=== otool check ==="
          otool -L "$INSTALL_PREFIX/bin/ffmpeg" | sed -n '1,200p'
          if otool -L "$INSTALL_PREFIX/bin/ffmpeg" | grep -E "/opt/homebrew|/usr/local/opt" ; then
            echo "❌ Found Homebrew-linked dylibs"; exit 1
          else
            echo "✅ No Homebrew dylibs referenced"
          fi

      - name: Package artifact (ffmpeg + ffprobe)
        run: |
          set -euxo pipefail
          cd "$INSTALL_PREFIX"
          tar -czf ffmpeg-macos-arm64-lgpl-clean-audio.tar.gz bin/ffmpeg bin/ffprobe
          tar -tzf ffmpeg-macos-arm64-lgpl-clean-audio.tar.gz
          ls -lh ffmpeg-macos-arm64-lgpl-clean-audio.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-macos-arm64-lgpl-clean-audio
          path: ${{ env.INSTALL_PREFIX }}/ffmpeg-macos-arm64-lgpl-clean-audio.tar.gz
