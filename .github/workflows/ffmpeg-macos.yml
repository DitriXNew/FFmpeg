# FFmpeg macOS ARM64 build with whisper.cpp for Flutter integration
name: build-ffmpeg-macos-arm64-lgpl-whisper

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  FFMPEG_TAG: "n8.0"
  INSTALL_PREFIX: "${{ github.workspace }}/install"
  WHISPER_PREFIX: "${{ github.workspace }}/whisper-install"
  MACOSX_DEPLOYMENT_TARGET: "13.0"

jobs:
  build-arm64:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          set -eux
          export HOMEBREW_NO_AUTO_UPDATE=1
          ensure() { 
            if brew list --versions "$1" >/dev/null 2>&1; then 
              echo "✓ $1 already installed"; 
            else 
              brew install "$1"; 
            fi 
          }
          ensure cmake
          ensure ninja
          ensure pkg-config
          ensure nasm
          ensure yasm
          ensure libvpx
          ensure aom
          ensure opus
          ensure libvorbis
          ensure libogg

      - name: Build and install whisper.cpp
        run: |
          set -eux
          
          # Clone specific release instead of master
          git clone --depth=1 --branch v1.7.6 https://github.com/ggml-org/whisper.cpp
          
          # Configure build
          cmake -S whisper.cpp -B build-whisper \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="$WHISPER_PREFIX" \
                -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSX_DEPLOYMENT_TARGET" \
                -DBUILD_SHARED_LIBS=OFF \
                -DGGML_METAL=ON \
                -DGGML_BLAS=OFF \
                -DWHISPER_BUILD_TESTS=OFF \
                -DWHISPER_BUILD_EXAMPLES=OFF
          
          # Build
          cmake --build build-whisper --config Release --parallel
          
          # Install (creates whisper.pc automatically)
          cmake --install build-whisper
          
          # Verify installation and version
          echo "=== Whisper installation check ==="
          ls -la "$WHISPER_PREFIX/lib/pkgconfig/" || echo "No pkgconfig dir"
          ls -la "$WHISPER_PREFIX/include/whisper.h" || echo "No whisper.h"
          
          # Check the generated whisper.pc file
          echo "=== Generated whisper.pc content ==="
          cat "$WHISPER_PREFIX/lib/pkgconfig/whisper.pc" || echo "No whisper.pc found"
          
          # Test pkg-config
          export PKG_CONFIG_PATH="${WHISPER_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          
          if pkg-config --exists whisper; then
            echo "whisper found via pkg-config"
            WHISPER_VERSION=$(pkg-config --modversion whisper)
            echo "Detected version: $WHISPER_VERSION"
            echo "Required version: >= 1.7.5"
            
            # Verify version meets FFmpeg requirement
            if pkg-config --atleast-version=1.7.5 whisper; then
              echo "Version check passed"
            else
              echo "Version check failed"
              exit 1
            fi
            
            echo "=== pkg-config output ==="
            echo "Cflags: $(pkg-config --cflags whisper)"
            echo "Libs: $(pkg-config --libs whisper)"
            echo "Static libs: $(pkg-config --libs --static whisper || echo 'N/A')"
            
            # Test actual compilation to see what FFmpeg configure checks
            echo "=== Testing whisper compilation ==="
            cat > test_whisper.c << 'EOF'
#include <whisper.h>
int main() {
    struct whisper_context* ctx = whisper_init_from_file("test");
    if (ctx) whisper_free(ctx);
    return 0;
}
EOF
            
            echo "Test compilation command:"
            echo "cc $(pkg-config --cflags whisper) test_whisper.c $(pkg-config --libs whisper) -o test_whisper"
            
            if cc $(pkg-config --cflags whisper) test_whisper.c $(pkg-config --libs whisper) -o test_whisper 2>&1; then
              echo "Test compilation successful"
              rm -f test_whisper test_whisper.c
            else
              echo "Test compilation failed - this is likely why FFmpeg configure fails"
              echo "Fixing whisper.pc with proper macOS frameworks..."
              
              # Add required macOS frameworks to whisper.pc
              sed -i '' 's|Libs: .*|Libs: -L${libdir} -lwhisper -lggml -lggml-base|' "$WHISPER_PREFIX/lib/pkgconfig/whisper.pc"
              sed -i '' '/Libs:/a\
Libs.private: -framework Accelerate -framework Foundation -framework Metal -framework MetalKit
' "$WHISPER_PREFIX/lib/pkgconfig/whisper.pc"
              
              echo "Updated whisper.pc:"
              cat "$WHISPER_PREFIX/lib/pkgconfig/whisper.pc"
              
              # Test again
              echo "Retesting compilation..."
              if cc $(pkg-config --cflags whisper) test_whisper.c $(pkg-config --libs whisper) -o test_whisper 2>&1; then
                echo "Test compilation now successful"
                rm -f test_whisper test_whisper.c
              else
                echo "Compilation still fails"
                rm -f test_whisper.c
                exit 1
              fi
            fi
            
          else
            echo "whisper not found via pkg-config"
            exit 1
          fi

      - name: Build FFmpeg with whisper support
        run: |
          set -eux
          
          # Clone FFmpeg
          git clone https://github.com/FFmpeg/FFmpeg ffmpeg-src
          cd ffmpeg-src
          git checkout "$FFMPEG_TAG"
          
          # Set environment
          export MACOSX_DEPLOYMENT_TARGET="$MACOSX_DEPLOYMENT_TARGET"
          export PKG_CONFIG_PATH="${WHISPER_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          
          echo "=== Environment check ==="
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          pkg-config --exists whisper || { echo "❌ whisper not found before configure"; exit 1; }
          
          # Configure FFmpeg
          ./configure \
            --prefix="$INSTALL_PREFIX" \
            --arch=arm64 \
            --target-os=darwin \
            --enable-whisper \
            --enable-videotoolbox \
            --disable-gpl \
            --disable-nonfree \
            --disable-static \
            --enable-shared \
            --enable-libvpx \
            --enable-libaom \
            --enable-libopus \
            --enable-libvorbis \
            --disable-debug \
            --disable-doc \
            --enable-pic
          
          # Build and install
          make -j"$(sysctl -n hw.ncpu)"
          make install

      - name: Verify build and LGPL compliance
        run: |
          set -eux
          echo "=== FFmpeg build verification ==="
          "$INSTALL_PREFIX/bin/ffmpeg" -version
          echo ""
          
          echo "=== Whisper filter check ==="
          "$INSTALL_PREFIX/bin/ffmpeg" -filters | grep whisper || echo "❌ No whisper filter"
          echo ""
          
          echo "=== LGPL compliance check ==="
          "$INSTALL_PREFIX/bin/ffmpeg" -buildconf
          if "$INSTALL_PREFIX/bin/ffmpeg" -buildconf | grep -q -- "--enable-gpl"; then
            echo "❌ ERROR: GPL found in build!"
            exit 1
          fi
          echo "✅ LGPL compliance verified"
          echo ""
          
          echo "=== Dynamic libraries ==="
          ls -la "$INSTALL_PREFIX/lib/"*.dylib || echo "No dylib files"
          echo ""
          
          echo "=== Dependencies check ==="
          otool -L "$INSTALL_PREFIX/bin/ffmpeg" | head -20

      - name: Package for Flutter
        run: |
          set -eux
          cd "$INSTALL_PREFIX"
          
          # Create package with all necessary files
          tar -czf ffmpeg-macos-arm64-lgpl-whisper.tar.gz \
            bin/ffmpeg \
            bin/ffprobe \
            lib/*.dylib \
            include/ || true
          
          echo "=== Package contents ==="
          tar -tzf ffmpeg-macos-arm64-lgpl-whisper.tar.gz | head -50
          echo ""
          
          echo "=== Package size ==="
          ls -lh ffmpeg-macos-arm64-lgpl-whisper.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-macos-arm64-lgpl-whisper
          path: ${{ env.INSTALL_PREFIX }}/ffmpeg-macos-arm64-lgpl-whisper.tar.gz
